if(min_val >= 0) {
# Para variables con valores positivos
datos_transformados[[paste0(var, "_log")]] <- log1p(datos_transformados[[var]])
datos_transformados[[paste0(var, "_sqrt")]] <- sqrt(datos_transformados[[var]])
# Transformación Box-Cox (requiere valores estrictamente positivos)
if(min_val > 0) {
bc_transform <- BoxCoxTrans(datos_transformados[[var]])
datos_transformados[[paste0(var, "_boxcox")]] <- predict(bc_transform, datos_transformados[[var]])
}
}
}
}
cat("TRANSFORMACIONES APLICADAS:\n")
cat("Variables originales:", ncol(datos_transformar), "\n")
# Identificar variables que necesitan transformación (|sesgo| > 0.5)
variables_a_transformar <- resultados_sesgo %>%
filter(Tipo %in% c("ALTO SESGO", "SESGO MODERADO")) %>%
pull(Variable)
cat("VARIABLES A TRANSFORMAR (|sesgo| > 0.5):\n")
print(variables_a_transformar)
# Aplicar diferentes transformaciones
datos_transformados <- datos_transformar
for(var in variables_a_transformar) {
if(var %in% colnames(datos_transformados)) {
# Obtener valores mínimos para ajustar transformaciones
min_val <- min(datos_transformados[[var]], na.rm = TRUE)
# Aplicar transformaciones según el tipo de variable
if(min_val >= 0) {
# Para variables con valores positivos
datos_transformados[[paste0(var, "_log")]] <- log1p(datos_transformados[[var]])
datos_transformados[[paste0(var, "_sqrt")]] <- sqrt(datos_transformados[[var]])
# Transformación Box-Cox (requiere valores estrictamente positivos)
if(min_val > 0) {
bc_transform <- BoxCoxTrans(datos_transformados[[var]])
datos_transformados[[paste0(var, "_boxcox")]] <- predict(bc_transform, datos_transformados[[var]])
}
}
}
}
cat("TRANSFORMACIONES APLICADAS:\n")
cat("Variables originales:", ncol(datos_transformar), "\n")
# Función para evaluar efectividad de transformaciones
evaluar_transformaciones <- function(var_original, vars_transformadas, nombre_original) {
resultados <- data.frame()
sesgo_original <- e1071::skewness(var_original, na.rm = TRUE)
for(transform_name in names(vars_transformadas)) {
if(transform_name != nombre_original) {
var_transformada <- vars_transformadas[[transform_name]]
sesgo_transformado <- e1071::skewness(var_transformada, na.rm = TRUE)
reduccion_sesgo <- abs(sesgo_original) - abs(sesgo_transformado)
resultados <- rbind(resultados, data.frame(
Variable = nombre_original,
Transformacion = transform_name,
Sesgo_Original = round(sesgo_original, 3),
Sesgo_Transformado = round(sesgo_transformado, 3),
Reduccion_Sesgo = round(reduccion_sesgo, 3),
Efectiva = ifelse(abs(sesgo_transformado) < abs(sesgo_original) &
abs(sesgo_transformado) < 1, "SÍ", "NO")
))
}
}
return(resultados)
}
# Evaluar todas las transformaciones
resultados_evaluacion <- data.frame()
for(var in variables_a_transformar) {
# Obtener todas las versiones de la variable
vars_relacionadas <- datos_transformados %>%
select(starts_with(var))
eval_var <- evaluar_transformaciones(
datos_transformar[[var]],
vars_relacionadas,
var
)
resultados_evaluacion <- rbind(resultados_evaluacion, eval_var)
}
cat("EVALUACIÓN DE TRANSFORMACIONES:\n")
print(resultados_evaluacion)
# Seleccionar la mejor transformación para cada variable
mejores_transformaciones <- resultados_evaluacion %>%
filter(Efectiva == "SÍ") %>%
group_by(Variable) %>%
filter(abs(Sesgo_Transformado) == min(abs(Sesgo_Transformado))) %>%
ungroup()
cat("\n MEJORES TRANSFORMACIONES SELECCIONADAS:\n")
print(mejores_transformaciones)
datos_transformados[acousticness==0]
datos_transformados$acousticness==0
is.any(datos_transformados$acousticness==0)
any(datos_transformados$acousticness==0)
any(datos_transformados$instrumentalness==0)
any(datos_transformados$instrumentalness==0)
any(datos_transformados$instrumentalness==0)
# Función para evaluar efectividad de transformaciones
evaluar_transformaciones <- function(var_original, vars_transformadas, nombre_original) {
resultados <- data.frame()
sesgo_original <- e1071::skewness(var_original, na.rm = TRUE)
for(transform_name in names(vars_transformadas)) {
if(transform_name != nombre_original) {
var_transformada <- vars_transformadas[[transform_name]]
sesgo_transformado <- e1071::skewness(var_transformada, na.rm = TRUE)
reduccion_sesgo <- abs(sesgo_original) - abs(sesgo_transformado)
resultados <- rbind(resultados, data.frame(
Variable = nombre_original,
Transformacion = transform_name,
Sesgo_Original = round(sesgo_original, 3),
Sesgo_Transformado = round(sesgo_transformado, 3),
Reduccion_Sesgo = round(reduccion_sesgo, 3),
Efectiva = ifelse(abs(sesgo_transformado) < abs(sesgo_original) &
abs(sesgo_transformado) < 1, "SÍ", "NO")
))
}
}
return(resultados)
}
# Evaluar todas las transformaciones
resultados_evaluacion <- data.frame()
for(var in variables_a_transformar) {
# Obtener todas las versiones de la variable
vars_relacionadas <- datos_transformados %>%
select(starts_with(var))
eval_var <- evaluar_transformaciones(
datos_transformar[[var]],
vars_relacionadas,
var
)
resultados_evaluacion <- rbind(resultados_evaluacion, eval_var)
}
cat("EVALUACIÓN DE TRANSFORMACIONES:\n")
print(resultados_evaluacion)
# Seleccionar la mejor transformación para cada variable
mejores_transformaciones <- resultados_evaluacion %>%
filter(Efectiva == "SÍ") %>%
group_by(Variable) %>%
filter(abs(Sesgo_Transformado) == min(abs(Sesgo_Transformado))) %>%
ungroup()
cat("\n MEJORES TRANSFORMACIONES SELECCIONADAS:\n")
print(mejores_transformaciones)
# Función para evaluar efectividad de transformaciones
evaluar_transformaciones <- function(var_original, vars_transformadas, nombre_original) {
resultados <- data.frame()
sesgo_original <- e1071::skewness(var_original, na.rm = TRUE)
for(transform_name in names(vars_transformadas)) {
if(transform_name != nombre_original) {
var_transformada <- vars_transformadas[[transform_name]]
sesgo_transformado <- e1071::skewness(var_transformada, na.rm = TRUE)
reduccion_sesgo <- abs(sesgo_original) - abs(sesgo_transformado)
resultados <- rbind(resultados, data.frame(
Variable = nombre_original,
Transformacion = transform_name,
Sesgo_Original = round(sesgo_original, 3),
Sesgo_Transformado = round(sesgo_transformado, 3),
Reduccion_Sesgo = round(reduccion_sesgo, 3),
Efectiva = ifelse(abs(sesgo_transformado) < abs(sesgo_original) &
abs(sesgo_transformado) < 1, "SÍ", "NO")
))
}
}
return(resultados)
}
# Evaluar todas las transformaciones
resultados_evaluacion <- data.frame()
for(var in variables_a_transformar) {
# Obtener todas las versiones de la variable
vars_relacionadas <- datos_transformados %>%
select(starts_with(var))
eval_var <- evaluar_transformaciones(
datos_transformar[[var]],
vars_relacionadas,
var
)
resultados_evaluacion <- rbind(resultados_evaluacion, eval_var)
}
cat("EVALUACIÓN DE TRANSFORMACIONES:\n")
print(resultados_evaluacion)
# Seleccionar la mejor transformación para cada variable
mejores_transformaciones <- resultados_evaluacion %>%
filter(Efectiva == "SÍ") %>%
group_by(Variable) %>%
filter(abs(Sesgo_Transformado) == min(abs(Sesgo_Transformado))) %>%
ungroup()
cat("\n MEJORES TRANSFORMACIONES SELECCIONADAS:\n")
print(mejores_transformaciones)
# INSTALAR Y CARGAR LIBRERÍAS
install.packages(c("FactoMineR", "factoextra", "nFactors"))
# INSTALAR Y CARGAR LIBRERÍAS
# install.packages(c("FactoMineR", "factoextra", "nFactors"))
library(FactoMineR)
library(factoextra)
library(nFactors)
# 6.3.1 ANÁLISIS DE COMPONENTES PRINCIPALES (PCA)
cat("ANÁLISIS DE COMPONENTES PRINCIPALES (PCA)\n")
cat("============================================\n")
# Usar el dataset final transformado (sin la variable objetivo)
datos_pca <- datos_final_transformado[, mejores_transformaciones$Variable]
# INSTALAR Y CARGAR LIBRERÍAS
# install.packages(c("FactoMineR", "factoextra", "nFactors"))
library(FactoMineR)
library(factoextra)
library(nFactors)
# 6.3.1 ANÁLISIS DE COMPONENTES PRINCIPALES (PCA)
cat("ANÁLISIS DE COMPONENTES PRINCIPALES (PCA)\n")
cat("============================================\n")
# CREAR dataset_final_transformado SI NO EXISTE
if(!exists("datos_final_transformado")) {
# Usar las mejores transformaciones seleccionadas
datos_final_transformado <- datos_transformar
for(i in 1:nrow(mejores_transformaciones)) {
var_original <- mejores_transformaciones$Variable[i]
transform_name <- mejores_transformaciones$Transformacion[i]
# Reemplazar variable original con su versión transformada
if(transform_name %in% colnames(datos_transformados)) {
datos_final_transformado[[var_original]] <- datos_transformados[[transform_name]]
cat("• Aplicada transformación:", var_original, "→", transform_name, "\n")
}
}
# Añadir la variable objetivo
datos_final_transformado$song_popularity <- datos_num$song_popularity
}
# Verificar que tenemos el dataset correcto
cat("Dataset final transformado - Dimensiones:", dim(datos_final_transformado), "\n")
# Usar SOLO las variables transformadas para PCA (excluyendo la variable objetivo)
variables_para_pca <- mejores_transformaciones$Variable
datos_pca <- datos_final_transformado[, variables_para_pca]
cat("Variables utilizadas para PCA:\n")
print(variables_para_pca)
# Estandarizar los datos para PCA
datos_pca_estandarizados <- scale(datos_pca)
# Ejecutar PCA
pca_resultado <- PCA(datos_pca_estandarizados, graph = FALSE)
# 6.3.2 DETERMINAR NÚMERO ÓPTIMO DE COMPONENTES
cat("\n DETERMINACIÓN DE COMPONENTES PRINCIPALES:\n")
# Método del codo
fviz_eig(pca_resultado, addlabels = TRUE, ylim = c(0, 50),
main = "Varianza Explicada por Componentes Principales")
# Análisis de eigenvalues
eigenvalues <- get_eigenvalue(pca_resultado)
cat("Eigenvalues y varianza explicada:\n")
print(round(eigenvalues, 3))
# Regla de Kaiser (eigenvalue > 1)
componentes_optimos <- sum(eigenvalues$eigenvalue > 1)
# INSTALAR Y CARGAR LIBRERÍAS
# install.packages(c("FactoMineR", "factoextra", "nFactors"))
library(FactoMineR)
library(factoextra)
library(nFactors)
```{r extraccion_variables_simple, warning=FALSE}
# INSTALAR Y CARGAR LIBRERÍAS
# install.packages(c("FactoMineR", "factoextra", "nFactors"))
library(FactoMineR)
library(factoextra)
library(nFactors)
# ==============================================================================
# 6.3 EXTRACCIÓN DE VARIABLES - VERSIÓN SIMPLE
# ==============================================================================
cat("🎵 COMIENZO EXTRACCIÓN DE VARIABLES\n")
cat("===================================\n\n")
# 1. PREPARAR DATOS PARA PCA
# ------------------------------------------------------------------------------
cat("1. 📊 PREPARANDO DATOS PARA ANÁLISIS...\n")
# Usar las variables transformadas (de los pasos anteriores)
variables_para_analisis <- c("speechiness", "liveness", "acousticness")
# Crear dataset solo con estas variables (excluir objetivo)
datos_analisis <- datos_transformados[, variables_para_analisis]
# Estandarizar (importante para PCA)
datos_estandarizados <- scale(datos_analisis)
cat("   • Variables analizadas:", paste(variables_para_analisis, collapse = ", "), "\n")
cat("   • Dimensiones datos:", dim(datos_estandarizados), "\n\n")
# 2. ANÁLISIS DE COMPONENTES PRINCIPALES (PCA)
# ------------------------------------------------------------------------------
cat("2. 🔍 EJECUTANDO ANÁLISIS DE COMPONENTES PRINCIPALES...\n")
pca_resultado <- prcomp(datos_estandarizados, scale. = TRUE)
# Resumen simple
cat("   • PCA completado\n")
cat("   • Número de componentes:", length(pca_resultado$sdev), "\n\n")
# 3. DETERMINAR COMPONENTES IMPORTANTES
# ------------------------------------------------------------------------------
cat("3. 📈 IDENTIFICANDO COMPONENTES IMPORTANTES...\n")
# Calcular varianza explicada
varianza_explicada <- pca_resultado$sdev^2 / sum(pca_resultado$sdev^2) * 100
# Mostrar varianza por componente
cat("   Varianza explicada por componente:\n")
for(i in 1:length(varianza_explicada)) {
cat("   • PC", i, ": ", round(varianza_explicada[i], 1), "%\n", sep = "")
}
# Regla simple: componentes que explican >10% de varianza
componentes_importantes <- which(varianza_explicada > 10)
cat("\n   • Componentes que explican >10% varianza: PC",
paste(componentes_importantes, collapse = ", PC"), "\n", sep = "")
# 4. CREAR NUEVAS VARIABLES (COMPONENTES)
# ------------------------------------------------------------------------------
cat("\n4. 🆕 CREANDO NUEVAS VARIABLES...\n")
if(length(componentes_importantes) > 0) {
# Extraer scores de componentes importantes
nuevos_componentes <- as.data.frame(pca_resultado$x[, componentes_importantes])
# Dar nombres descriptivos
nombres_descriptivos <- c()
for(i in 1:length(componentes_importantes)) {
nombre <- paste0("Componente_", i)
nombres_descriptivos <- c(nombres_descriptivos, nombre)
}
colnames(nuevos_componentes) <- nombres_descriptivos
# Añadir al dataset original
datos_final <- cbind(datos_final_transformado, nuevos_componentes)
cat("   • Nuevas variables creadas:", paste(nombres_descriptivos, collapse = ", "), "\n")
cat("   • Total variables en dataset final:", ncol(datos_final), "\n\n")
} else {
datos_final <- datos_final_transformado
cat("   • No se crearon nuevos componentes (poca varianza explicada)\n\n")
}
# 5. CREAR VARIABLES DE INTERACCIÓN SIMPLES
# ------------------------------------------------------------------------------
cat("5. 🔄 CREANDO VARIABLES DE INTERACCIÓN...\n")
# Interacciones musicalmente significativas
datos_final$Interaccion_Vocal <- datos_final$speechiness * datos_final$liveness
datos_final$Interaccion_Acustica <- datos_final$acousticness * (1 - datos_final$speechiness)
cat("   • Interacciones creadas:\n")
cat("     - Interaccion_Vocal (speechiness × liveness)\n")
cat("     - Interaccion_Acustica (acousticness × instrumentalidad)\n\n")
# 6. RESUMEN FINAL
# ------------------------------------------------------------------------------
cat("6. ✅ RESUMEN FINAL - EXTRACCIÓN DE VARIABLES\n")
cat("   =========================================\n")
cat("   • Variables originales para análisis:", length(variables_para_analisis), "\n")
cat("   • Nuevos componentes creados:", ifelse(exists("nuevos_componentes"), ncol(nuevos_componentes), 0), "\n")
cat("   • Interacciones creadas: 2\n")
cat("   • Total variables finales:", ncol(datos_final), "\n")
cat("   • Varianza explicada por componentes:",
ifelse(length(componentes_importantes) > 0,
round(sum(varianza_explicada[componentes_importantes]), 1), 0), "%\n")
cat("\n🎯 EXTRACCIÓN DE VARIABLES COMPLETADA\n")
# INSTALAR Y CARGAR LIBRERÍAS
# install.packages(c("FactoMineR", "factoextra", "nFactors"))
library(FactoMineR)
library(factoextra)
library(nFactors)
cat("COMIENZO EXTRACCIÓN DE VARIABLES\n")
cat("===================================\n\n")
cat("1. PREPARANDO DATOS PARA ANÁLISIS...\n")
# Usar las variables transformadas (de los pasos anteriores)
variables_para_analisis <- c("speechiness", "liveness", "acousticness")
# Crear dataset solo con estas variables (excluir objetivo)
datos_analisis <- datos_transformados[, variables_para_analisis]
# Estandarizar (importante para PCA)
datos_estandarizados <- scale(datos_analisis)
cat("   • Variables analizadas:", paste(variables_para_analisis, collapse = ", "), "\n")
cat("   • Dimensiones datos:", dim(datos_estandarizados), "\n\n")
cat("2. EJECUTANDO ANÁLISIS DE COMPONENTES PRINCIPALES...\n")
pca_resultado <- prcomp(datos_estandarizados, scale. = TRUE)
# Resumen simple
cat("   • PCA completado\n")
cat("   • Número de componentes:", length(pca_resultado$sdev), "\n\n")
cat("3. IDENTIFICANDO COMPONENTES IMPORTANTES...\n")
# Calcular varianza explicada
varianza_explicada <- pca_resultado$sdev^2 / sum(pca_resultado$sdev^2) * 100
# Mostrar varianza por componente
cat("   Varianza explicada por componente:\n")
for(i in 1:length(varianza_explicada)) {
cat("   • PC", i, ": ", round(varianza_explicada[i], 1), "%\n", sep = "")
}
# Regla simple: componentes que explican >10% de varianza
componentes_importantes <- which(varianza_explicada > 10)
cat("\n   • Componentes que explican >10% varianza: PC",
paste(componentes_importantes, collapse = ", PC"), "\n", sep = "")
cat("\n4. CREANDO NUEVAS VARIABLES...\n")
if(length(componentes_importantes) > 0) {
# Extraer scores de componentes importantes
nuevos_componentes <- as.data.frame(pca_resultado$x[, componentes_importantes])
# Dar nombres descriptivos
nombres_descriptivos <- c()
for(i in 1:length(componentes_importantes)) {
nombre <- paste0("Componente_", i)
nombres_descriptivos <- c(nombres_descriptivos, nombre)
}
colnames(nuevos_componentes) <- nombres_descriptivos
# Añadir al dataset original
datos_final <- cbind(datos_final_transformado, nuevos_componentes)
cat("   • Nuevas variables creadas:", paste(nombres_descriptivos, collapse = ", "), "\n")
cat("   • Total variables en dataset final:", ncol(datos_final), "\n\n")
} else {
datos_final <- datos_final_transformado
cat("   • No se crearon nuevos componentes (poca varianza explicada)\n\n")
}
cat("5. CREANDO VARIABLES DE INTERACCIÓN...\n")
# Interacciones musicalmente significativas
datos_final$Interaccion_Vocal <- datos_final$speechiness * datos_final$liveness
datos_final$Interaccion_Acustica <- datos_final$acousticness * (1 - datos_final$speechiness)
cat("   • Interacciones creadas:\n")
cat("     - Interaccion_Vocal (speechiness × liveness)\n")
cat("     - Interaccion_Acustica (acousticness × instrumentalidad)\n\n")
# 6. RESUMEN FINAL
# ------------------------------------------------------------------------------
cat("6. RESUMEN FINAL - EXTRACCIÓN DE VARIABLES\n")
cat("   =========================================\n")
cat("   • Variables originales para análisis:", length(variables_para_analisis), "\n")
cat("   • Nuevos componentes creados:", ifelse(exists("nuevos_componentes"), ncol(nuevos_componentes), 0), "\n")
cat("   • Interacciones creadas: 2\n")
cat("   • Total variables finales:", ncol(datos_final), "\n")
cat("   • Varianza explicada por componentes:",
ifelse(length(componentes_importantes) > 0,
round(sum(varianza_explicada[componentes_importantes]), 1), 0), "%\n")
cat("\n EXTRACCIÓN DE VARIABLES COMPLETADA\n")
# INSTALAR Y CARGAR LIBRERÍAS
# install.packages(c("FactoMineR", "factoextra", "nFactors"))
library(FactoMineR)
library(factoextra)
library(nFactors)
cat("COMIENZO EXTRACCIÓN DE VARIABLES\n")
cat("===================================\n\n")
cat("1. PREPARANDO DATOS PARA ANÁLISIS...\n")
# Usar las 7 variables óptimas del método RFE (con las transformaciones aplicadas)
variables_para_analisis <- c("danceability", "audio_valence", "speechiness", "liveness",
"instrumentalness", "acousticness", "loudness")
# Crear dataset solo con estas variables (excluir objetivo)
datos_analisis <- datos_transformados[, variables_para_analisis]
# Estandarizar (importante para PCA)
datos_estandarizados <- scale(datos_analisis)
cat("   • Variables analizadas:", paste(variables_para_analisis, collapse = ", "), "\n")
cat("   • Dimensiones datos:", dim(datos_estandarizados), "\n\n")
cat("2. EJECUTANDO ANÁLISIS DE COMPONENTES PRINCIPALES...\n")
pca_resultado <- prcomp(datos_estandarizados, scale. = TRUE)
# Resumen simple
cat("   • PCA completado\n")
cat("   • Número de componentes:", length(pca_resultado$sdev), "\n\n")
cat("3. IDENTIFICANDO COMPONENTES IMPORTANTES...\n")
# Calcular varianza explicada
varianza_explicada <- pca_resultado$sdev^2 / sum(pca_resultado$sdev^2) * 100
# Mostrar varianza por componente
cat("   Varianza explicada por componente:\n")
for(i in 1:length(varianza_explicada)) {
cat("   • PC", i, ": ", round(varianza_explicada[i], 1), "%\n", sep = "")
}
# Regla simple: componentes que explican >10% de varianza
componentes_importantes <- which(varianza_explicada > 10)
cat("\n   • Componentes que explican >10% varianza: PC",
paste(componentes_importantes, collapse = ", PC"), "\n", sep = "")
cat("\n4. CREANDO NUEVAS VARIABLES...\n")
if(length(componentes_importantes) > 0) {
# Extraer scores de componentes importantes
nuevos_componentes <- as.data.frame(pca_resultado$x[, componentes_importantes])
# Dar nombres descriptivos
nombres_descriptivos <- c()
for(i in 1:length(componentes_importantes)) {
nombre <- paste0("Componente_", i)
nombres_descriptivos <- c(nombres_descriptivos, nombre)
}
colnames(nuevos_componentes) <- nombres_descriptivos
# Añadir al dataset original
datos_final <- cbind(datos_final_transformado, nuevos_componentes)
cat("   • Nuevas variables creadas:", paste(nombres_descriptivos, collapse = ", "), "\n")
cat("   • Total variables en dataset final:", ncol(datos_final), "\n\n")
} else {
datos_final <- datos_final_transformado
cat("   • No se crearon nuevos componentes (poca varianza explicada)\n\n")
}
cat("5. CREANDO VARIABLES DE INTERACCIÓN...\n")
# Interacciones musicalmente significativas
datos_final$Interaccion_Vocal <- datos_final$speechiness * datos_final$liveness
datos_final$Interaccion_Acustica <- datos_final$acousticness * (1 - datos_final$speechiness)
cat("   • Interacciones creadas:\n")
cat("     - Interaccion_Vocal (speechiness × liveness)\n")
cat("     - Interaccion_Acustica (acousticness × instrumentalidad)\n\n")
# ------------------------------------------------------------------------------
# RESUMEN FINAL
cat("6. RESUMEN FINAL - EXTRACCIÓN DE VARIABLES\n")
cat("   =========================================\n")
cat("   • Variables originales para análisis:", length(variables_para_analisis), "\n")
cat("   • Nuevos componentes creados:", ifelse(exists("nuevos_componentes"), ncol(nuevos_componentes), 0), "\n")
cat("   • Interacciones creadas: 2\n")
cat("   • Total variables finales:", ncol(datos_final), "\n")
cat("   • Varianza explicada por componentes:",
ifelse(length(componentes_importantes) > 0,
round(sum(varianza_explicada[componentes_importantes]), 1), 0), "%\n")
cat("\n EXTRACCIÓN DE VARIABLES COMPLETADA\n")
cat("\n4. CREANDO NUEVAS VARIABLES...\n")
if(length(componentes_importantes) > 0) {
# Extraer scores de componentes importantes
nuevos_componentes <- as.data.frame(pca_resultado$x[, componentes_importantes])
# Dar nombres descriptivos
nombres_descriptivos <- c()
for(i in 1:length(componentes_importantes)) {
nombre <- paste0("Componente_", i)
nombres_descriptivos <- c(nombres_descriptivos, nombre)
}
colnames(nuevos_componentes) <- nombres_descriptivos
# Añadir al dataset original
datos_final <- cbind(datos_final_transformado, nuevos_componentes)
cat("   • Nuevas variables creadas:", paste(nombres_descriptivos, collapse = ", "), "\n")
cat("   • Total variables en dataset final:", ncol(datos_final), "\n\n")
} else {
datos_final <- datos_final_transformado
cat("   • No se crearon nuevos componentes (poca varianza explicada)\n\n")
}
cat("5. CREANDO VARIABLES DE INTERACCIÓN...\n")
# Interacciones musicalmente significativas
datos_final$Interaccion_Vocal <- datos_final$speechiness * datos_final$liveness
datos_final$Interaccion_Acustica <- datos_final$acousticness * (1 - datos_final$speechiness)
cat("   • Interacciones creadas:\n")
cat("     - Interaccion_Vocal (speechiness × liveness)\n")
cat("     - Interaccion_Acustica (acousticness × instrumentalidad)\n\n")
# ------------------------------------------------------------------------------
# RESUMEN FINAL
cat("6. RESUMEN FINAL - EXTRACCIÓN DE VARIABLES\n")
cat("   =========================================\n")
cat("   • Variables originales para análisis:", length(variables_para_analisis), "\n")
cat("   • Nuevos componentes creados:", ifelse(exists("nuevos_componentes"), ncol(nuevos_componentes), 0), "\n")
cat("   • Interacciones creadas: 2\n")
cat("   • Total variables finales:", ncol(datos_final), "\n")
cat("   • Varianza explicada por componentes:",
ifelse(length(componentes_importantes) > 0,
round(sum(varianza_explicada[componentes_importantes]), 1), 0), "%\n")
cat("\n EXTRACCIÓN DE VARIABLES COMPLETADA\n")
